---
# User setting
- name: Create prometheus group
  ansible.builtin.group:
    name: prometheus
    system: true
    state: present
  become: true

- name: Create prometheus user
  ansible.builtin.user:
    name: prometheus
    comment: prometheus
    group: prometheus
    shell: /sbin/nologin
    system: true
    create_home: false
  become: true

# Directory setting
- name: Create prometheus config directory
  ansible.builtin.file:
    path: "{{ prometheus_config_path }}"
    state: directory
    mode: "0755"
    owner: prometheus
    group: prometheus
  become: true

- name: Create prometheus data directory
  ansible.builtin.file:
    path: "{{ prometheus_dbdata_path }}"
    state: directory
    mode: "0755"
    owner: prometheus
    group: prometheus
  become: true

# Download and Install
- name: Download Prometheus binary
  ansible.builtin.get_url:
    url: "{{ prometheus_bin_dl_file }}"
    dest: /tmp/
    mode: "0644"
    owner: prometheus
    group: prometheus
  register: dl_prom_bin
  become: true

- name: Unarchive Prometheus binary
  ansible.builtin.unarchive:
    src: "{{ dl_prom_bin.dest }}"
    dest: "/tmp/"
    owner: prometheus
    group: prometheus
    remote_src: true
  become: true

- name: Copy binary files to install path
  ansible.builtin.copy:
    src: "/tmp/{{ prometheus_bin_file }}/{{ item }}"
    dest: "{{ prometheus_install_path }}/{{ item }}"
    mode: "0744"
    owner: prometheus
    group: prometheus
    remote_src: true
  become: true
  loop:
    - prometheus
    - promtool

- name: Send file prometheus.service
  ansible.builtin.template:
    mode: "0644"
    src: prometheus.service.j2
    dest: /etc/systemd/system/prometheus.service
  become: true
  notify:
    - Restart prometheus service

# Configurations
- name: Send file prometheus configs
  ansible.builtin.template:
    mode: "0644"
    src: "{{ item }}.j2"
    dest: "{{ prometheus_config_path }}/{{ item }}"
    owner: prometheus
    group: prometheus
  become: true
  loop:
    - prometheus.yml
  notify:
    - Restart prometheus service
